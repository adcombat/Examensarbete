Konfiguera blynk APP - Vid skapande av egen blynk server(github.com / blynkkk / blynk - server)

#define BLYNK_PRINT Serial

#include <Adafruit_BMP280.h> #include <Adafruit_Sensor.h> #include <Wire.h> #include <ESP8266_Lib.h> #include <BlynkSimpleShieldEsp8266.h> #include <DHT.h>
 // Auth från Iphone(priv) Blynk Appen 
char auth[] = "6Qxo7FHjxwOjCAkqVkdpxJV_CtccCEA04";
//Wifi + PW
char ssid[] = "36:C9:B6:B1:97:22";
char pass[] = "Abel1294";
// Arduino Mega
#define EspSerial Serial3
// wifi kortets default baud rate
#define ESP8266_BAUD 115200

ESP8266 wifi( & EspSerial);

#define DHTPIN 4
// pin koppling.

// Temp sensorn
#define DHTTYPE DHT11

// skapar objekt för min bmp280
DHT dht(DHTPIN, DHTTYPE);
Adafruit_BMP280 bmp;
BlynkTimer timer_dht;
BlynkTimer timer_bmp;
BlynkTimer timer_mq2;

const int calibrationLed = ;

const int MQ_PIN = ;

const int MQ_power = ;

int RL_VALUE = ;

float RO_CLEAN_AIR_FACTOR = ;

#define MQ_powerPin 8

//Definiera hur många prover som ska samlas under kalibreringsfasen
int CALIBARAION_SAMPLE_TIMES = 50;
//Definiera tidsintervallet mellan varje prov (i millisekunder)              
int CALIBRATION_SAMPLE_INTERVAL = 500;

//Definiera antalet prover som du ska samla i normalt läge
int READ_SAMPLE_INTERVAL = 50;
//Definiera tidsintervallet mellan varje prov (i millisekunder)                    
int READ_SAMPLE_TIMES = 5;

// Applikation macros MQ2
#define GAS_LPG 0
#define GAS_CO 1
#define GAS_SMOKE 2

// Gas hantering
float LPGCurve[3] = {
        2.3,
        0.21,
        -0.47
};
float COCurve[3] = {
        2.3,
        0.72,
        -0.34
};
float SmokeCurve[3] = {
        2.3,
        0.53,
        -0.44
};

// Ro kalibering måste ändras
float Ro = ;

void sendDHT() {
        float h = dht.readHumidity();
        float t2 = dht.readTemperature(); // för celcius 

        if (isnan(h) || isnan(t2)) {
                Serial.println("Misslyckades att läsa DHT sensorn!");
                return;
        }
        Blynk.virtualWrite(V4, h);;
}

void sendBMP() {
        float t = bmp.readTemperature();
        float p = bmp.readPressure();

        if (isnan(p) || isnan(t)) {
                Serial.println("Misslyckades att läsa BMP sesorn!");
                return;
        }
        p *= 0.00750062;
        Blynk.virtualWrite(V6, t);
        Blynk.virtualWrite(V5, p);

        Serial.println(t);
        Serial.println(p);
}

void sendMQ2() {
        digitalWrite(MQ_power, HIGH);
        delay(500);
        long iPPM_LPG = 0;
        long iPPM_CO = 0;
        long iPPM_Smoke = 0;

        iPPM_LPG = MQGetGasPercentage(MQRead(MQ_PIN) / Ro, GAS_LPG);
        iPPM_CO = MQGetGasPercentage(MQRead(MQ_PIN) / Ro, GAS_CO);
        iPPM_Smoke = MQGetGasPercentage(MQRead(MQ_PIN) / Ro, GAS_SMOKE);

        Serial.println("Concentration of gas ");
        Serial.print("LPG: ");
        Serial.print(iPPM_LPG);
        Serial.println(" ppm");
        Serial.print("CO: ");
        Serial.print(iPPM_CO);
        Serial.println(" ppm");
        Serial.print("Smoke: ");
        Serial.print(iPPM_Smoke);
        Serial.println(" ppm");

        Blynk.virtualWrite(V8, iPPM_CO);
        Blynk.virtualWrite(V7, iPPM_LPG);
        Blynk.virtualWrite(V9, iPPM_Smoke);

        digitalWrite(MQ_power, LOW);
        delay(200);
}

void setup() {
        // Debug console
        Serial.begin(9600);

        // Set ESP8266 baud rate
        EspSerial.begin(ESP8266_BAUD);
        delay(10);

        Blynk.begin(auth, wifi, ssid, pass);
        // Ej specificerat servern:
        //Blynk.begin(auth, wifi, ssid, pass, "blynk-cloud.com", 80);
        //Blynk.begin(auth, wifi, ssid, pass, IPAddress(192,168,1,100), 8080);
        pinMode(MQ_PIN, INPUT);
        pinMode(MQ_power, OUTPUT);
        dht.begin();
        bmp.begin();
        // Fuktion för varje sekund
        timer_dht.setInterval(15000 L, sendDHT);
        timer_bmp.setInterval(9000 L, sendBMP);
        timer_mq2.setInterval(12000 L, sendMQ2);
}

void loop() {
        Blynk.run();
        timer_dht.run();
        timer_bmp.run();
        timer_mq2.run();
}

// MQR resistans beräkning
float MQResistanceCalculation(int raw_adc) {
        return (((float) RL_VALUE * (1023 - raw_adc) / raw_adc));
}

//MQ kalibering måste vara ren luft då den hantar detta.

float MQCalibration(int mq_pin) {
        int i;
        float val = 0;
        // flera prover
        for (i = 0; i < CALIBARAION_SAMPLE_TIMES; i++) {
                val += MQResistanceCalculation(analogRead(mq_pin));
                delay(CALIBRATION_SAMPLE_INTERVAL);
        }
        //räknar snitt värdet 
        val = val / CALIBARAION_SAMPLE_TIMES;
        // dividerar med RO 
        val = val / RO_CLEAN_AIR_FACTOR; //delat med RO_CLEAN_AIR_FACTOR avkastar Ro
        return val;

}

// MQ avläsning
float MQRead(int mq_pin) {
        int i;
        float rs = 0;

        for (i = 0; i < READ_SAMPLE_TIMES; i++) {
                rs += MQResistanceCalculation(analogRead(mq_pin));
                delay(READ_SAMPLE_INTERVAL);
        }

        rs = rs / READ_SAMPLE_TIMES;

        return rs;
}

// MQ gas procent
long MQGetGasPercentage(float rs_ro_ratio, int gas_id) {
        if (gas_id == GAS_LPG) {
                return MQGetPercentage(rs_ro_ratio, LPGCurve);
        } else if (gas_id == GAS_CO) {
                return MQGetPercentage(rs_ro_ratio, COCurve);
        } else if (gas_id == GAS_SMOKE) {
                return MQGetPercentage(rs_ro_ratio, SmokeCurve);
        }

        return 0;
}

//MQ Gas procent

long MQGetPercentage(float rs_ro_ratio, float * pcurve) {
        return (pow(10, (((log(rs_ro_ratio) - pcurve[1]) / pcurve[2]) + pcurve[0])));
}
